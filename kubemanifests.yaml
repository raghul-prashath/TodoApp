apiVersion: v1
items:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.service.type: LoadBalancer
        kompose.version: 1.26.1 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.service: client-tcp
      name: client-tcp
    spec:
      ports:
        - name: "3000"
          port: 3000
          targetPort: 3000
      selector:
        io.kompose.service: client
      type: LoadBalancer
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.version: 1.26.1 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.service: mysql
      name: mysql
    spec:
      ports:
        - name: "3306"
          port: 3306
          targetPort: 3306
      selector:
        io.kompose.service: mysql
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.service.type: LoadBalancer
        kompose.version: 1.26.1 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.service: server-tcp
      name: server-tcp
    spec:
      ports:
        - name: "5000"
          port: 5000
          targetPort: 5000
      selector:
        io.kompose.service: server
      type: LoadBalancer
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Pod
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.service.type: LoadBalancer
        kompose.version: 1.26.1 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/jointbridge: "true"
        io.kompose.service: client
      name: client
    spec:
      containers:
        - env:
            - name: REACT_HOST
              value: server
          image: foreverrp/client
          name: client
          ports:
            - containerPort: 3000
          resources: {}
      restartPolicy: OnFailure
    status: {}
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      creationTimestamp: null
      name: jointbridge
    spec:
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  io.kompose.network/jointbridge: "true"
      podSelector:
        matchLabels:
          io.kompose.network/jointbridge: "true"
  - apiVersion: v1
    kind: Pod
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.version: 1.26.1 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/jointbridge: "true"
        io.kompose.service: mysql
      name: mysql
    spec:
      containers:
        - args:
            - mysqld
            - --default-authentication-plugin=mysql_native_password
          env:
            - name: MYSQL_DATABASE
              value: todos
            - name: MYSQL_PASSWORD
              value: password
            - name: MYSQL_ROOT_PASSWORD
              value: password
            - name: MYSQL_USER
              value: user
          image: foreverrp/mysql
          name: mydatabase
          ports:
            - containerPort: 3306
          resources: {}
      restartPolicy: OnFailure
    status: {}
  - apiVersion: v1
    kind: Pod
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.service.type: LoadBalancer
        kompose.version: 1.26.1 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/jointbridge: "true"
        io.kompose.service: server
      name: server
    spec:
      containers:
        - env:
            - name: MYSQL_DATABASE
              value: todos
            - name: MYSQL_HOST
              value: mysql-tcp
            - name: MYSQL_PASSWORD
              value: password
            - name: MYSQL_USER
              value: user
          image: foreverrp/server
          name: server
          ports:
            - containerPort: 5000
          resources: {}
      restartPolicy: OnFailure
    status: {}
kind: List
metadata: {}

